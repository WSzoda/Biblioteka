// <auto-generated />
using Biblioteka.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Biblioteka.Migrations
{
    [DbContext(typeof(LibraryDbContext))]
    [Migration("20231110112811_Added books seed and AuthorBook table and seed")]
    partial class AddedbooksseedandAuthorBooktableandseed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.13");

            modelBuilder.Entity("Biblioteka.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CountryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 2,
                            Name = "J.R.R.",
                            Surname = "Tolkien"
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 3,
                            Name = "Stephen",
                            Surname = "King"
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 1,
                            Name = "Andrzej",
                            Surname = "Sapkowski"
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 3,
                            Name = "George R.R.",
                            Surname = "Martin"
                        },
                        new
                        {
                            Id = 5,
                            CountryId = 2,
                            Name = "J.K.",
                            Surname = "Rowling"
                        },
                        new
                        {
                            Id = 6,
                            CountryId = 3,
                            Name = "H.P.",
                            Surname = "Lovecraft"
                        },
                        new
                        {
                            Id = 7,
                            CountryId = 2,
                            Name = "William",
                            Surname = "Shakespeare"
                        },
                        new
                        {
                            Id = 8,
                            CountryId = 2,
                            Name = "Jane",
                            Surname = "Austen"
                        },
                        new
                        {
                            Id = 9,
                            CountryId = 2,
                            Name = "Emily",
                            Surname = "Bronte"
                        },
                        new
                        {
                            Id = 10,
                            CountryId = 2,
                            Name = "Charlotte",
                            Surname = "Bronte"
                        },
                        new
                        {
                            Id = 11,
                            CountryId = 2,
                            Name = "Anne",
                            Surname = "Bronte"
                        },
                        new
                        {
                            Id = 12,
                            CountryId = 2,
                            Name = "Arthur Conan",
                            Surname = "Doyle"
                        },
                        new
                        {
                            Id = 13,
                            CountryId = 2,
                            Name = "Agatha",
                            Surname = "Christie"
                        },
                        new
                        {
                            Id = 14,
                            CountryId = 4,
                            Name = "Jules",
                            Surname = "Verne"
                        },
                        new
                        {
                            Id = 15,
                            CountryId = 3,
                            Name = "Herman",
                            Surname = "Melville"
                        },
                        new
                        {
                            Id = 16,
                            CountryId = 3,
                            Name = "Mark",
                            Surname = "Twain"
                        },
                        new
                        {
                            Id = 17,
                            CountryId = 2,
                            Name = "Charles",
                            Surname = "Dickens"
                        },
                        new
                        {
                            Id = 18,
                            CountryId = 5,
                            Name = "Fyodor",
                            Surname = "Dostoevsky"
                        });
                });

            modelBuilder.Entity("Biblioteka.Models.AuthorBook", b =>
                {
                    b.Property<int>("AuthorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AuthorId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("AuthorBook");

                    b.HasData(
                        new
                        {
                            AuthorId = 1,
                            BookId = 1
                        });
                });

            modelBuilder.Entity("Biblioteka.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("GenreId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("LanguageId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumberOfPages")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PublisherId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("YearOfPublishing")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "A novel by F. Scott Fitzgerald",
                            GenreId = 2,
                            ISBN = "978-3-16-148410-0",
                            Image = "great_gatsby.jpg",
                            LanguageId = 1,
                            NumberOfPages = 180,
                            PublisherId = 3,
                            Title = "The Great Gatsby",
                            YearOfPublishing = 1925
                        });
                });

            modelBuilder.Entity("Biblioteka.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Poland"
                        },
                        new
                        {
                            Id = 2,
                            Name = "United Kingdom"
                        },
                        new
                        {
                            Id = 3,
                            Name = "United States"
                        },
                        new
                        {
                            Id = 4,
                            Name = "France"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Germany"
                        });
                });

            modelBuilder.Entity("Biblioteka.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "ul. Kowalska 1, 00-000 Warszawa",
                            Email = "kowlski@jan.pl",
                            Name = "Jan",
                            PhoneNumber = "123456789",
                            Surname = "Kowalski"
                        },
                        new
                        {
                            Id = 2,
                            Address = "ul. Nowaka 1, 00-000 Warszawa",
                            Email = "adam@nowak.pl",
                            Name = "Adam",
                            PhoneNumber = "987654321",
                            Surname = "Nowak"
                        },
                        new
                        {
                            Id = 3,
                            Address = "ul. Nowacki 1, 00-000 Warszawa",
                            Email = "kamil@nowacki.pl",
                            Name = "Kamil",
                            PhoneNumber = "123123123",
                            Surname = "Nowacki"
                        });
                });

            modelBuilder.Entity("Biblioteka.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Science Fiction"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Horror"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Romance"
                        });
                });

            modelBuilder.Entity("Biblioteka.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LanguageName = "English"
                        },
                        new
                        {
                            Id = 2,
                            LanguageName = "Polish"
                        },
                        new
                        {
                            Id = 3,
                            LanguageName = "German"
                        },
                        new
                        {
                            Id = 4,
                            LanguageName = "French"
                        });
                });

            modelBuilder.Entity("Biblioteka.Models.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CountryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("YearOfCreation")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            Name = "PWN",
                            YearOfCreation = 0
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 1,
                            Name = "Wydawnictwo Literackie",
                            YearOfCreation = 0
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 2,
                            Name = "Penguin Books",
                            YearOfCreation = 0
                        });
                });

            modelBuilder.Entity("Biblioteka.Models.Rental", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RentalDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ReturnDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Rentals");
                });

            modelBuilder.Entity("Biblioteka.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Rating")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Biblioteka.Models.Worker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Workers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "test@wp.pl",
                            Name = "Wojtek",
                            Role = "Admin",
                            Surname = "Szoda"
                        },
                        new
                        {
                            Id = 2,
                            Email = "kowalski@test.pl",
                            Name = "Jan",
                            Role = "Worker",
                            Surname = "Kowalski"
                        },
                        new
                        {
                            Id = 3,
                            Email = "adam@nowak.pl",
                            Name = "Adam",
                            Role = "Worker",
                            Surname = "Nowak"
                        });
                });

            modelBuilder.Entity("Biblioteka.Models.Author", b =>
                {
                    b.HasOne("Biblioteka.Models.Country", "Country")
                        .WithMany("Authors")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Biblioteka.Models.AuthorBook", b =>
                {
                    b.HasOne("Biblioteka.Models.Author", "Author")
                        .WithMany("AuthorBooks")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biblioteka.Models.Book", "Book")
                        .WithMany("BookAuthors")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Biblioteka.Models.Book", b =>
                {
                    b.HasOne("Biblioteka.Models.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biblioteka.Models.Language", "Language")
                        .WithMany("Books")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biblioteka.Models.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Language");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("Biblioteka.Models.Publisher", b =>
                {
                    b.HasOne("Biblioteka.Models.Country", "Country")
                        .WithMany("Publishers")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Biblioteka.Models.Rental", b =>
                {
                    b.HasOne("Biblioteka.Models.Book", "Book")
                        .WithMany("Rentals")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biblioteka.Models.Customer", "Customer")
                        .WithMany("Rentals")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Biblioteka.Models.Review", b =>
                {
                    b.HasOne("Biblioteka.Models.Book", "Book")
                        .WithMany("Reviews")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biblioteka.Models.Customer", "Customer")
                        .WithMany("Reviews")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Biblioteka.Models.Author", b =>
                {
                    b.Navigation("AuthorBooks");
                });

            modelBuilder.Entity("Biblioteka.Models.Book", b =>
                {
                    b.Navigation("BookAuthors");

                    b.Navigation("Rentals");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Biblioteka.Models.Country", b =>
                {
                    b.Navigation("Authors");

                    b.Navigation("Publishers");
                });

            modelBuilder.Entity("Biblioteka.Models.Customer", b =>
                {
                    b.Navigation("Rentals");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Biblioteka.Models.Genre", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Biblioteka.Models.Language", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Biblioteka.Models.Publisher", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
